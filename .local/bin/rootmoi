#!/usr/bin/env bash

# # shellcheck shell=bash

set -euo pipefail

if [[ -n "${DOTFILES_DEBUG:-}" ]]; then
  set -x
fi

function ensure_path_entry() {
  local entries=("$@")

  for entry in "${entries[@]}"; do
    if [[ ":${PATH}:" != *":${entry}:"* ]]; then
      export PATH="${entry}:${PATH}"
    fi
  done
}

function log_color() {
  local color_code="$1"
  shift

  printf "\033[${color_code}m%s\033[0m\n" "$*" >&2
}

function log_red() {
  log_color "0;31" "$@"
}

function log_blue() {
  log_color "0;34" "$@"
}

function log_green() {
  log_color "1;32" "$@"
}

function log_yellow() {
  log_color "1;33" "$@"
}

function log_task() {
  log_blue "🔃" "$@"
}

function log_manual_action() {
  log_red "⚠️" "$@"
}

function log_c() {
  log_yellow "👉" "$@"
}

function c() {
  log_c "$@"
  "$@"
}

function c_exec() {
  log_c "$@"
  exec "$@"
}

function log_error() {
  log_red "❌" "$@"
}

function log_info() {
  log_blue "ℹ️" "$@"
}

function error() {
  log_error "$@"
  exit 1
}

function sudo() {
  local exec=false
  if [[ "$1" == "exec" ]]; then
    shift
    exec=true
  fi

  # shellcheck disable=SC2312
  if [[ "$(id -u)" -eq 0 ]]; then
    if [[ "${exec}" == true ]]; then
      exec "$@"
    else
      "$@"
    fi
  else
    if ! command sudo --non-interactive true 2>/dev/null; then
      log_manual_action "Root privileges are required, please enter your password below"
      command sudo --validate
    fi
    if [[ "${exec}" == true ]]; then
      exec sudo "$@"
    else
      command sudo "$@"
    fi
  fi
}

function is_apt_package_installed() {
  local package="$1"

  apt list --quiet --quiet --installed "${package}" 2>/dev/null | grep --quiet .
}

function not_during_test() {
  if [[ "${DOTFILES_TEST:-}" == true ]]; then
    log_info "Skipping '${*}' because we are in test mode"
  else
    "${@}"
  fi
}

# https://stackoverflow.com/a/53640320/12156188
function service_exists() {
  local n=$1
  if [[ $(systemctl list-units --all -t service --full --no-legend "${n}.service" | sed 's/^\s*//g' | cut -f1 -d' ') == ${n}.service ]]; then
    return 0
  else
    return 1
  fi
}


# The following line is for ShellCheck to correctly identify the above include
true || source ../../.chezmoitemplates/scripts-library

# 
# 
# 
# 

# We remove chezmoi as part of the installation, so this handles it
if [[ -f '/home/rmfranken/bin/chezmoi' ]]; then
  executable='/home/rmfranken/bin/chezmoi'
else
  # chezmoi is installed with Homebrew
  ensure_path_entry "${HOME}/.linuxbrew/bin" "/home/linuxbrew/.linuxbrew/bin"
  executable=$(command -v chezmoi)
fi

# Ensure the folders are created, because otherwise they will be created as
# root, including the ~/.cache and ~/.config, which can cause other programs
# to stop working.
# shellcheck disable=SC2016
mkdir -p '/home/rmfranken/.config/rootmoi' '/home/rmfranken/.cache/rootmoi'

# We should not use sudo's --preserve-env option because the sudo function will
# automatically bypass sudo if the user is root already.
env_args=(env "PATH=${PATH}")
if [[ "${DOTFILES_TEST:-}" == true ]]; then
  env_args+=("DOTFILES_TEST=true")
fi

sudo exec "${env_args[@]}" \
  "${executable}" "$@" \
  --config='/home/rmfranken/.config/rootmoi/chezmoi.yaml' \
  --persistent-state='/home/rmfranken/.config/rootmoi/chezmoistate.boltdb' \
  --cache='/home/rmfranken/.cache/rootmoi'
